syntax = "proto3";

// 클라이언트 -> 서버: 회원가입 요청 패킷
message C2S_SignUpRequest {
    string id = 1;
    string password = 2;
}

// 서버 -> 클라이언트: 회원가입 응답 패킷
message S2C_SignUpResponse {
    bool success = 1; // true = 성공, false = 실패
    string message = 2; // 성공/실패 출력 메세지 
    uint32 fail_code = 3;
    // GlobalFailCode fail_code = 3;
    // 추후 code 번호 외에 추가로 보내야할 소요가 생기면 클래스 생성
}

// 클라이언트 -> 서버: 로그인 요청 패킷
message C2S_LoginRequest {
    string id = 1;
    string password = 2;
}

// 서버 -> 클라이언트: 로그인 응답 패킷
message S2C_LoginResponse {
    bool success = 1; // true = 성공, false = 실패
    string message = 2; // 성공/실패 시 출력 될 메세지 
    string token = 3; // 성공 시 발급되는 JWT 토큰
    uint32 fail_code = 4;
    // GlobalFailCode fail_code = 4;
    // 추후 code 번호 외에 추가로 보내야할 소요가 생기면 클래스 생성
}

// 클라이언트 -> 서버: 대결 신청 요청 패킷
message C2S_matchRequest {
    string id = 1;
		
}

// 서버 -> 클라이언트: 대결 시작 통지 패킷
message S2C_MatchFound {
		// string targetId = 1 // 상대 id
    int64 timestamp = 1; // 메시지 생성 타임스탬프 (Unix 타임스탬프)
		repeated UserData users = 2;
		message UserData {
			string id = 1;
			uint32 gold = 2;
			uint32 base_hp = 3;
			uint32 monsterLevel = 4;
			
			repeated TowerCoordinates = 5;
			message TowerCoordinates { // ??
				uint32 x = 1;
				uint32 y = 2;
			}
			
		}
}

message GamePacket {
    oneof payload {
        C2S_SignUpRequest signup_request = 1;
        S2C_SignUpResponse signup_response = 2;
        C2S_LoginRequest login_request = 3;
        S2C_LoginResponse login_response = 4;
        C2S_matchRequest match_request = 5;
        S2C_MatchFound match_found = 6;
    }
}